import streamlit as st
import pandas as pd
import altair as alt

# --- 1. CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="Dashboard | Seguran√ßa de Voo CENIPA",
    layout="wide"
)

# --- 2. CARREGAR E PREPARAR OS DADOS (EM CACHE) ---
# Esta fun√ß√£o √© executada apenas uma vez para carregar e limpar todos os dados.
@st.cache_data
def load_data():
    """Carrega, limpa e pr√©-processa todos os 5 arquivos CSV do CENIPA."""
    try:
        # Definir valores que ser√£o tratados como Nulos
        na_values = ['***', 'NULL', 'NA', 'N/A', '']
        
        # --- CORRE√á√ÉO AQUI: Adicionado encoding='latin-1' ---
        
        # Carregar os 5 arquivos com a codifica√ß√£o correta
        df_ocorrencia = pd.read_csv('data/ocorrencia.csv', sep=';', na_values=na_values, low_memory=False, encoding='latin-1')
        df_aeronave = pd.read_csv('data/aeronave.csv', sep=';', na_values=na_values, low_memory=False, encoding='latin-1')
        df_fator = pd.read_csv('data/fator_contribuinte.csv', sep=';', na_values=na_values, low_memory=False, encoding='latin-1')
        df_tipo = pd.read_csv('data/ocorrencia_tipo.csv', sep=';', na_values=na_values, low_memory=False, encoding='latin-1')
        # df_recomendacao = pd.read_csv('data/recomendacao.csv', sep=';', na_values=na_values, low_memory=False, encoding='latin-1') # Carregado mas n√£o usado nos gr√°ficos
        
        # --- Limpeza e Processamento ---
        
        # 1. Tabela OCORR√äNCIA
        # Converter 'ocorrencia_dia' para datetime e extrair o ano
        df_ocorrencia['ocorrencia_dia'] = pd.to_datetime(df_ocorrencia['ocorrencia_dia'], dayfirst=True, errors='coerce')
        df_ocorrencia['ocorrencia_ano'] = df_ocorrencia['ocorrencia_dia'].dt.year
        # Limpar Nulos do ano (se a data falhou)
        df_ocorrencia = df_ocorrencia.dropna(subset=['ocorrencia_ano'])
        df_ocorrencia['ocorrencia_ano'] = df_ocorrencia['ocorrencia_ano'].astype(int)
        
        # 2. Tabela AERONAVE
        # Converter fatalidades para num√©rico, tratando erros e Nulos
        df_aeronave['aeronave_fatalidades_total'] = pd.to_numeric(df_aeronave['aeronave_fatalidades_total'], errors='coerce').fillna(0)
        # Preencher Nulos no segmento (extremamente importante para a an√°lise)
        df_aeronave['aeronave_registro_segmento'] = df_aeronave['aeronave_registro_segmento'].fillna('INDETERMINADO')

        # 3. Tabela FATOR
        df_fator = df_fator.dropna(subset=['fator_area'])
        
        # 4. Tabela TIPO
        df_tipo = df_tipo.dropna(subset=['ocorrencia_tipo'])
        
        # Retornar um dicion√°rio com os DataFrames limpos
        return {
            "ocorrencia": df_ocorrencia,
            "aeronave": df_aeronave,
            "fator": df_fator,
            "tipo": df_tipo
            # "recomendacao": df_recomendacao
        }

    except FileNotFoundError as e:
        st.error(f"Erro ao carregar os dados. Verifique se o arquivo est√° no local correto (pasta 'data/'). Detalhe: {e}")
        return None

# Carregar os dados
data_dict = load_data()

# Se os dados n√£o forem carregados, interrompe o app
if data_dict is None:
    st.stop()

# Desempacotar os dados para facilitar o uso
df_ocorrencia = data_dict['ocorrencia']
df_aeronave = data_dict['aeronave']
df_fator = data_dict['fator']
df_tipo = data_dict['tipo']

# --- 3. SE√á√ÉO 1: T√çTULO E PANORAMA GERAL ---
st.title("Decolando com Seguran√ßa: Onde Reside o Risco A√©reo no Brasil?")
st.warning(
    "**Problem√°tica:** Onde realmente reside o maior risco na avia√ß√£o civil brasileira? "
    "Nossa an√°lise investiga se o perigo est√° nas **M√°quinas** (falhas mec√¢nicas) ou no **Fator Humano** (decis√µes e opera√ß√µes)."
)

st.header("Se√ß√£o 1: O Panorama Geral das Ocorr√™ncias")
st.markdown("Primeiro, vamos entender o contexto. Quantas ocorr√™ncias temos e qual a gravidade delas?")

# KPIs da Se√ß√£o 1
kpi1, kpi2, kpi3 = st.columns(3)
kpi1.metric(
    "Total de Ocorr√™ncias (desde 2007)",
    f"{df_ocorrencia.shape[0]:,}"
)
kpi2.metric(
    "Total de Fatalidades (desde 2007)",
    f"{int(df_aeronave['aeronave_fatalidades_total'].sum()):,}"
)
# Gr√°fico de pizza pequeno para Classifica√ß√£o
classificacao_data = df_ocorrencia['ocorrencia_classificacao'].value_counts().reset_index()
chart_classif = alt.Chart(classificacao_data).mark_arc(outerRadius=80).encode(
    theta=alt.Theta("count", stack=True),
    color=alt.Color("ocorrencia_classificacao", title="Classifica√ß√£o"),
    tooltip=["ocorrencia_classificacao", "count"]
).properties(title="Ocorr√™ncias por Classifica√ß√£o")
kpi3.altair_chart(chart_classif)


# Gr√°fico 1: S√©rie Temporal
st.subheader("Estamos Melhorando ou Piorando?")
st.markdown("A contagem de ocorr√™ncias (`ACIDENTE`, `INCIDENTE GRAVE`, `INCIDENTE`) ao longo do tempo.")

# Agrupar por ano e classifica√ß√£o
ocorrencias_ano = df_ocorrencia[df_ocorrencia['ocorrencia_ano'] >= 2007].groupby(
    ['ocorrencia_ano', 'ocorrencia_classificacao']
).size().reset_index(name='contagem')

# Criar o gr√°fico de linha
chart_temporal = alt.Chart(ocorrencias_ano).mark_line(point=True).encode(
    x=alt.X('ocorrencia_ano:O', title='Ano da Ocorr√™ncia'), # 'O' para Ordinal (ano)
    y=alt.Y('contagem:Q', title='N√∫mero de Ocorr√™ncias'),
    color=alt.Color('ocorrencia_classificacao', title='Classifica√ß√£o'),
    tooltip=['ocorrencia_ano', 'ocorrencia_classificacao', 'contagem']
).properties(
    title='Ocorr√™ncias Aeron√°uticas por Ano'
).interactive()
st.altair_chart(chart_temporal, use_container_width=True)
st.markdown("---")

# --- 4. SE√á√ÉO 2: ONDE EST√Å O RISCO? (SEGMENTO E TIPO) ---
st.header("Se√ß√£o 2: Onde o Risco se Concentra?")
st.markdown("""
O p√∫blico geral teme a avia√ß√£o comercial (voos de linha a√©rea), mas ser√° que √© ela a principal fonte de risco? 
Aqui, **focamos apenas em ACIDENTES** para entender onde o perigo √© maior.
""")

col1, col2 = st.columns(2)

with col1:
    st.subheader("Risco por Segmento da Avia√ß√£o")
    
    # 1. Juntar aeronave com ocorrencia para filtrar s√≥ acidentes
    df_aeronave_acidentes = pd.merge(
        df_aeronave,
        df_ocorrencia[['codigo_ocorrencia', 'ocorrencia_classificacao']],
        left_on='codigo_ocorrencia2',
        right_on='codigo_ocorrencia',
        how='left' # Usar left join para manter todas as aeronaves
    )
    
    # 2. Filtrar apenas por ACIDENTE
    df_aeronave_acidentes = df_aeronave_acidentes[
        df_aeronave_acidentes['ocorrencia_classificacao'] == 'ACIDENTE'
    ]
    
    # 3. Contar por segmento
    segmento_data = df_aeronave_acidentes['aeronave_registro_segmento'].value_counts().nlargest(10).reset_index()
    
    chart_segmento = alt.Chart(segmento_data).mark_bar().encode(
        x=alt.X('count', title='N¬∫ de Acidentes'),
        y=alt.Y('aeronave_registro_segmento', title='Segmento da Avia√ß√£o', sort='-x'),
        tooltip=['aeronave_registro_segmento', 'count']
    ).properties(
        title='Top 10 Segmentos por N¬∫ de ACIDENTES'
    ).interactive()
    st.altair_chart(chart_segmento, use_container_width=True)
    st.info("üí° **Insight (Quebra de Mito):** A avia√ß√£o **PARTICULAR** e **AGR√çCOLA** somam a vasta maioria dos acidentes, n√£o a avia√ß√£o REGULAR (Linhas A√©reas).")

with col2:
    st.subheader("Tipos de Ocorr√™ncias Mais Comuns")
    
    # Usar a tabela df_tipo (n√£o precisa filtrar por acidente, √© o tipo do evento em si)
    tipo_data = df_tipo['ocorrencia_tipo'].value_counts().nlargest(10).reset_index()
    
    chart_tipo = alt.Chart(tipo_data).mark_bar().encode(
        x=alt.X('count', title='N¬∫ de Ocorr√™ncias'),
        y=alt.Y('ocorrencia_tipo', title='Tipo de Ocorr√™ncia', sort='-x'),
        tooltip=['ocorrencia_tipo', 'count']
    ).properties(
        title='Top 10 Tipos de Ocorr√™ncias (Geral)'
    ).interactive()
    st.altair_chart(chart_tipo, use_container_width=True)
    st.info("üí° **Insight:** 'FALHA DO MOTOR EM VOO' e 'PERDA DE CONTROLE EM VOO' est√£o entre os eventos mais comuns e graves.")

st.markdown("---")

# --- 5. SE√á√ÉO 3: A CAUSA RAIZ (M√ÅQUINA VS. HOMEM) ---
st.header("Se√ß√£o 3: A Causa Raiz - M√°quina ou Homem?")
st.markdown("""
Esta √© a revela√ß√£o central da nossa hist√≥ria. Analisamos a tabela de **Fatores Contribuintes** para responder √† nossa problem√°tica inicial.
""")

col_fator1, col_fator2 = st.columns(2)

with col_fator1:
    st.subheader("Vis√£o Geral dos Fatores Contribuintes")
    
    # Contar por 'fator_area'
    fator_area_data = df_fator['fator_area'].value_counts().reset_index()
    
    chart_area = alt.Chart(fator_area_data).mark_bar().encode(
        x=alt.X('count', title='N¬∫ de Men√ß√µes'),
        y=alt.Y('fator_area', title='√Årea do Fator', sort='-x'),
        tooltip=['fator_area', 'count']
    ).properties(
        title='Causas Ra√≠zes das Ocorr√™ncias'
    ).interactive()
    st.altair_chart(chart_area, use_container_width=True)

with col_fator2:
    st.subheader("Zoom no 'Fator Humano'")
    
    # 1. Filtrar o DataFrame apenas por FATOR HUMANO
    df_fator_humano = df_fator[df_fator['fator_area'] == 'FATOR HUMANO']
    
    # 2. Contar os fatores espec√≠ficos
    fator_nome_data = df_fator_humano['fator_nome'].value_counts().nlargest(10).reset_index()
    
    chart_fator_nome = alt.Chart(fator_nome_data).mark_bar().encode(
        x=alt.X('count', title='N¬∫ de Men√ß√µes'),
        y=alt.Y('fator_nome', title='Fator Espec√≠fico', sort='-x'),
        tooltip=['fator_nome', 'count']
    ).properties(
        title='Top 10 Fatores Humanos Contribuintes'
    ).interactive()
    st.altair_chart(chart_fator_nome, use_container_width=True)

st.success(
    "üéØ **A Resposta (O Cl√≠max):** A an√°lise √© inequ√≠voca. O **FATOR HUMANO** √©, de longe, "
    "a √°rea mais contribuinte para ocorr√™ncias, superando 'Fator Material' (falha da m√°quina) "
    "e 'Fator Operacional' (ambiente/infraestrutura). "
    "Especificamente, **'JULGAMENTO DE PILOTAGEM'** e **'PROCESSO DECIS√ìRIO'** s√£o os principais desafios, "
    "indicando que as falhas s√£o mais de decis√£o do que de habilidade t√©cnica."
)
st.markdown("---")

# --- 6. SE√á√ÉO 4: SOLU√á√ïES E RECOMENDA√á√ïES ---
st.header("Se√ß√£o 4: Solu√ß√µes e Recomenda√ß√µes Estrat√©gicas (Para a ANAC)")
st.markdown("Com base na hist√≥ria que os dados contaram, propomos as seguintes a√ß√µes para aumentar a seguran√ßa da avia√ß√£o:")

rec1, rec2, rec3 = st.columns(3)

with rec1:
    st.subheader("1. üéØ Foco na Fiscaliza√ß√£o")
    st.markdown(
        "A **Avia√ß√£o Geral (Particular e Agr√≠cola)**, e n√£o a comercial, representa o maior "
        "foco de acidentes (Se√ß√£o 2). A fiscaliza√ß√£o e os programas de preven√ß√£o da ANAC "
        "devem ter esse segmento como prioridade absoluta."
    )

with rec2:
    st.subheader("2. üß† Foco no Treinamento")
    st.markdown(
        "Os principais fatores humanos s√£o **'Julgamento'** e **'Processo Decis√≥rio'** (Se√ß√£o 3). "
        "Isso sugere que os pilotos sabem *como* voar, mas falham em *quando* tomar decis√µes. "
        "Recomendamos refor√ßo em treinamentos de **CRM** (Gerenciamento de Recursos) e **ADM** (Tomada de Decis√£o Aeron√°utica)."
    )
    
with rec3:
    st.subheader("3. ‚úàÔ∏è Foco no Tipo de Ocorr√™ncia")
    st.markdown(
        "**'Falha do Motor em Voo'** √© um evento cr√≠tico (Se√ß√£o 2). Deve-se "
        "refor√ßar a fiscaliza√ß√£o de manuten√ß√£o preventiva (pane seca, contamina√ß√£o de combust√≠vel, etc.) "
        "na avia√ß√£o geral, onde a manuten√ß√£o pode ser menos rigorosa que na comercial."
    )